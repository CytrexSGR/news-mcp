name: Alembic Schema Safety Check

on:
  pull_request:
    paths:
      - 'app/models/**'
      - 'alembic/**'
      - '*.py'

jobs:
  check-migrations:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: news_user
          POSTGRES_PASSWORD: news_password
          POSTGRES_DB: news_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install alembic sqlalchemy psycopg2-binary sqlmodel
          pip install -r requirements.txt

      - name: Apply existing migrations
        env:
          DATABASE_URL: postgresql://news_user:news_password@localhost:5432/news_db
        run: |
          alembic upgrade head

      - name: Check for unsafe autogenerate changes
        env:
          DATABASE_URL: postgresql://news_user:news_password@localhost:5432/news_db
        run: |
          # Generate migration and check for dangerous operations
          alembic revision --autogenerate -m "CI check" > migration_output.txt 2>&1 || true

          # Check for DROP operations that aren't whitelisted
          if grep -E "DROP (TABLE|COLUMN)" migration_output.txt; then
            echo "❌ DANGER: Detected DROP operations in autogenerated migration!"
            echo "Please review the following drops:"
            grep -E "DROP (TABLE|COLUMN)" migration_output.txt

            # Check if drops are for protected tables
            if grep -E "DROP TABLE.*(analysis_|item_analysis|content_processing)" migration_output.txt; then
              echo "🛑 CRITICAL: Attempting to drop protected analysis tables!"
              exit 1
            fi

            echo "⚠️  If these drops are intentional, create an explicit migration"
            exit 1
          fi

          echo "✅ No dangerous DROP operations detected"

      - name: Check model-database consistency
        run: |
          python -c "
import sys
from app.models import *
from sqlmodel import create_engine, SQLModel

engine = create_engine('postgresql://news_user:news_password@localhost:5432/news_db')

# Check that all models can be loaded
try:
    metadata = SQLModel.metadata
    print(f'✅ Successfully loaded {len(metadata.tables)} table definitions')

    # List protected tables that exist
    protected = ['item_analysis', 'analysis_runs', 'analysis_run_items']
    for table in protected:
        if table in metadata.tables:
            print(f'✅ Protected table {table} is registered in metadata')
        else:
            print(f'⚠️  Protected table {table} not in metadata - will be preserved by include_object policy')

except Exception as e:
    print(f'❌ Error loading models: {e}')
    sys.exit(1)
          "

      - name: Generate migration diff report
        if: always()
        run: |
          echo "## Migration Safety Report" > migration_report.md
          echo "" >> migration_report.md

          if [ -f migration_output.txt ]; then
            echo "### Detected Schema Changes:" >> migration_report.md
            echo '```sql' >> migration_report.md
            cat migration_output.txt | grep -E "(CREATE|ALTER|DROP)" >> migration_report.md || echo "No changes detected"
            echo '```' >> migration_report.md
          fi

          echo "" >> migration_report.md
          echo "### Protected Tables:" >> migration_report.md
          echo "- item_analysis ✅" >> migration_report.md
          echo "- analysis_runs ✅" >> migration_report.md
          echo "- analysis_run_items ✅" >> migration_report.md
          echo "- content_processing_logs ✅" >> migration_report.md

      - name: Comment PR with report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('migration_report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });