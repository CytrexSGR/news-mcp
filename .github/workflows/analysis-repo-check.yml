name: AnalysisRepo Raw SQL Prevention

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/worker/**'
      - 'app/api/**'
      - 'app/services/**'

jobs:
  check-analysis-raw-sql:
    runs-on: ubuntu-latest
    name: Check for Raw Analysis SQL

    steps:
    - uses: actions/checkout@v4

    - name: Check for Raw Analysis SQL in Worker Code
      run: |
        echo "üîç Checking for raw analysis SQL in worker and API code..."

        # Check for direct item_analysis table operations
        VIOLATIONS=$(grep -r -n --include="*.py" \
          -E "(INSERT INTO item_analysis|UPDATE item_analysis|DELETE FROM item_analysis)" \
          app/worker app/api app/services || true)

        if [ ! -z "$VIOLATIONS" ]; then
          echo "‚ùå Direct item_analysis SQL operations detected:"
          echo "$VIOLATIONS"
          echo ""
          echo "Use AnalysisRepository instead of raw SQL."
          exit 1
        fi

        # Check for session.exec with analysis tables
        SESSION_VIOLATIONS=$(grep -r -n --include="*.py" \
          -E "session\.exec.*item_analysis" \
          app/worker app/api app/services || true)

        if [ ! -z "$SESSION_VIOLATIONS" ]; then
          echo "‚ùå Direct session.exec with item_analysis detected:"
          echo "$SESSION_VIOLATIONS"
          echo ""
          echo "Use AnalysisRepository methods instead."
          exit 1
        fi

        # Check for raw SQL strings containing analysis operations
        RAW_SQL_VIOLATIONS=$(grep -r -n --include="*.py" \
          -E "(\".*INSERT INTO item_analysis|'.*INSERT INTO item_analysis)" \
          app/worker app/api app/services || true)

        if [ ! -z "$RAW_SQL_VIOLATIONS" ]; then
          echo "‚ùå Raw SQL strings with item_analysis INSERT detected:"
          echo "$RAW_SQL_VIOLATIONS"
          echo ""
          echo "Use AnalysisRepository.upsert_analysis() instead."
          exit 1
        fi

        echo "‚úÖ No raw analysis SQL violations found"

    - name: Check for Analysis Run Raw SQL
      run: |
        echo "üîç Checking for raw analysis_runs SQL..."

        # Check for direct analysis_runs operations outside repositories
        RUN_VIOLATIONS=$(grep -r -n --include="*.py" \
          -E "(INSERT INTO analysis_runs|UPDATE analysis_runs)" \
          app/worker app/api app/services | \
          grep -v "app/repositories/" || true)

        if [ ! -z "$RUN_VIOLATIONS" ]; then
          echo "‚ùå Direct analysis_runs SQL operations detected outside repositories:"
          echo "$RUN_VIOLATIONS"
          echo ""
          echo "Use appropriate repository methods instead."
          exit 1
        fi

        echo "‚úÖ No raw analysis_runs SQL violations found"

    - name: Check for Required Repository Imports
      run: |
        echo "üîç Checking that analysis code uses repositories..."

        # Find Python files that might need AnalysisRepository
        ANALYSIS_FILES=$(find app/worker app/api -name "*.py" -exec grep -l "analysis" {} \; | \
          grep -E "(analysis|worker)" || true)

        if [ ! -z "$ANALYSIS_FILES" ]; then
          echo "üìÅ Analysis-related files found:"
          for file in $ANALYSIS_FILES; do
            echo "  - $file"

            # Check if file contains database operations but no repository import
            if grep -q -E "(session\.exec|INSERT|UPDATE|SELECT.*item_analysis)" "$file"; then
              if ! grep -q "from app\.repositories" "$file"; then
                echo "‚ö†Ô∏è  File $file contains DB operations but no repository import"
                echo "    Consider using AnalysisRepository if working with analysis data"
              fi
            fi
          done
        fi

        echo "‚úÖ Repository import check completed"

    - name: Validate AnalysisRepository Usage
      run: |
        echo "üîç Validating AnalysisRepository usage patterns..."

        # Check for proper repository instantiation
        REPO_USAGE=$(grep -r -n --include="*.py" \
          "AnalysisRepository" app/worker app/api app/services || true)

        if [ ! -z "$REPO_USAGE" ]; then
          echo "üìä AnalysisRepository usage found:"
          echo "$REPO_USAGE"

          # Validate that repository is properly injected (not instantiated inline)
          INLINE_INSTANTIATION=$(grep -r -n --include="*.py" \
            "AnalysisRepository(" app/worker app/api app/services | \
            grep -v "__init__" || true)

          if [ ! -z "$INLINE_INSTANTIATION" ]; then
            echo "‚ö†Ô∏è  Inline repository instantiation detected:"
            echo "$INLINE_INSTANTIATION"
            echo "    Consider using dependency injection instead"
          fi
        fi

        echo "‚úÖ Repository usage validation completed"

  check-feature-flag-integration:
    runs-on: ubuntu-latest
    name: Check Feature Flag Integration

    steps:
    - uses: actions/checkout@v4

    - name: Check Worker Feature Flag Integration
      run: |
        echo "üîç Checking worker feature flag integration..."

        # Check that worker has feature flag support
        if [ -f "app/worker/analysis_worker.py" ]; then
          if ! grep -q "feature_flags" "app/worker/analysis_worker.py"; then
            echo "‚ùå Worker missing feature flag integration"
            echo "Worker should check 'analysis_repo' feature flag for repository usage"
            exit 1
          fi

          if ! grep -q "_check_feature_flags" "app/worker/analysis_worker.py"; then
            echo "‚ùå Worker missing feature flag check method"
            exit 1
          fi

          echo "‚úÖ Worker feature flag integration found"
        else
          echo "‚ö†Ô∏è  analysis_worker.py not found"
        fi

    - name: Check API Feature Flag Endpoints
      run: |
        echo "üîç Checking API feature flag endpoints..."

        if [ -f "app/api/feature_flags_admin.py" ]; then
          if ! grep -q "analysis_repo" "app/api/feature_flags_admin.py"; then
            echo "‚ö†Ô∏è  No analysis_repo flag references in admin API"
          fi

          if ! grep -q "analysis_shadow" "app/api/feature_flags_admin.py"; then
            echo "‚ö†Ô∏è  No analysis shadow comparison endpoints"
          fi

          echo "‚úÖ Feature flag admin API check completed"
        fi

  check-shadow-comparison:
    runs-on: ubuntu-latest
    name: Check Shadow Comparison Setup

    steps:
    - uses: actions/checkout@v4

    - name: Check Analysis Shadow Comparison
      run: |
        echo "üîç Checking analysis shadow comparison setup..."

        if [ -f "app/utils/analysis_shadow_compare.py" ]; then
          echo "‚úÖ Analysis shadow comparison module found"

          # Check for required methods
          REQUIRED_METHODS=("compare_analysis_upsert" "compare_analysis_get" "compare_aggregation_query")

          for method in "${REQUIRED_METHODS[@]}"; do
            if ! grep -q "$method" "app/utils/analysis_shadow_compare.py"; then
              echo "‚ùå Missing required method: $method"
              exit 1
            fi
          done

          echo "‚úÖ All required shadow comparison methods found"
        else
          echo "‚ùå Analysis shadow comparison module missing"
          echo "Create app/utils/analysis_shadow_compare.py for cutover validation"
          exit 1
        fi

    - name: Check Shadow Comparison Integration
      run: |
        echo "üîç Checking shadow comparison integration..."

        # Check if shadow comparison is imported in relevant files
        ANALYSIS_FILES=$(find app -name "*.py" -exec grep -l "analysis.*repo\|AnalysisRepo" {} \; || true)

        for file in $ANALYSIS_FILES; do
          if grep -q "repository" "$file" && ! grep -q "shadow" "$file"; then
            echo "‚ö†Ô∏è  File $file uses repository but no shadow comparison: $file"
          fi
        done

        echo "‚úÖ Shadow comparison integration check completed"